<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Food for Thought Expected</title>
    <description>while [ 'alive' ]; do think &amp;&amp; act | tee blog; done</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Jul 2018 12:11:15 +0800</pubDate>
    <lastBuildDate>Sun, 01 Jul 2018 12:11:15 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>小心假设，大胆质疑</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;A：这里用Integer.valueOf把字符串强制转化为整数，但没有判断是否能转，也没有捕捉异常，太粗暴了。
B：哎呀，和客户端做了约定，这个一定是可转为整数的。
A：……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;类似上面的对话，程序员读者一定不陌生。B的行为背后有着坚强的道理支撑，充分相信别人的承诺，让事情变得简单，有何不可？一时竟无法反驳，倒显得A鸡蛋里挑骨头了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;开源项目不靠谱，必须自己写。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个就不必再开会沟通了，早说过了，大家肯定都知道的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;类似的对话不胜枚举，润物细无声地融入日常生活，以至于没人发觉它有丝毫的问题。&lt;/p&gt;

&lt;p&gt;真没问题吗？&lt;/p&gt;

&lt;p&gt;你把这段代码的work寄托在了诸多假设上。假设客户端同学正确理解了这个约定，假设他敲代码时没有忘记，假设他写了注释给后人看，假设后人get到且遵守了，假设不会有人恶意调用接口……呵呵。&lt;/p&gt;

&lt;p&gt;什么，你只关心它现在能work，才不care以后怎样？滚，别让我再看到你。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assumption is the mother of all screw-ups.by Wethern&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不信？问特斯拉老板去，相信马斯克会用他的“第一原理”呼你一脸，继续滚。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在每一系统的探索中，存在第一原理，是一个最基本的命题或假设，不能被省略或删除，也不能被违反。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;眼熟吧，没错，数学里的公理。“两点之间，直线最短”……&lt;/p&gt;

&lt;p&gt;基于颠不破的事实、真理，还是基于经验、猜测，决定了事物的生命力。&lt;/p&gt;

&lt;p&gt;马斯克牛逼，首先在于他的思考架构，剥开表象，洞察本质，然后从本质一层层推演。&lt;/p&gt;

&lt;p&gt;这很难，真的很难。但至少，你得努力。至少，你得开始提防“假设”，下次撞见的时候，祭之以“质疑”，尤其是对你自己的假设。&lt;/p&gt;

&lt;p&gt;害人之心不可有，承诺别人不返回null，就努力做到；防人之心不可无，虽然别人承诺了不返回null，但你得“质疑”一下，加个判断，善待生命，远离NPE。&lt;/p&gt;

&lt;p&gt;线上又出诡异问题了，你感觉是线程池的问题，决定换个库，发布看看？ 也许你是胡适的粉丝，对“大胆假设”深以为然，但请你也一并记住他的下半句，“小心求证”。没有经过验证的假设都是耍流氓，无法解释现象的措施都是投机。&lt;/p&gt;

&lt;p&gt;重构一词，现在越来越高大上了，三天两头听人说，我准备重构下XX模块，似乎没有做过重构的开发，都不好意思叫自己开发。如果真是需求改得面目全非那倒也罢了，如果是之前代码写得烂，呵呵。于我而言，重构虽有废旧立新的快感，更有悔不当初的痛苦。尤其是发现当初把一些不靠谱的假设当成前提，不禁要自问，尼玛，这真是我写的代码？take it for granted的假设残酷地坍塌了，前期考虑不足欠下的巨款，也该还了，然而，摇身一变，它们成了重构的光鲜理由。&lt;/p&gt;

&lt;p&gt;这是横亘在通往架构师之路上的一座高山。&lt;/p&gt;

&lt;p&gt;功夫在代码外，在于思维起点。是从实际出发，还是从主观出发？从数学出发，还是从规则出发？从需求出发，还是从功能出发？越原始的出发点，越牢靠，在此基础上理性推导，逻辑证实，构建的系统就稳固，重构的需求就低。&lt;/p&gt;

&lt;p&gt;因此，在制定方案时，要明确评判标准，记录决策过程的假设，以及假设的论证方式。你得让别人清楚明白地知道这一过程，不论是为了堵上后人质疑的嘴，还是为了供后续重新评估。&lt;/p&gt;

&lt;p&gt;已经不再想当然地假设了，可有些东西本身是不确定的，不假设就无法继续啊。没错，不得不承认，这个世界本来就有很多不确定性，这个时候，我们能做的是，遵守延迟决策法则。能推迟就推迟，直到有迹象可以观察，测试和验证，再决策不晚。在此之前，总是选择包容所有可能性的方案，不确定是Integer还是Float，那干脆用Number吧，顺带还有了更宽的适用面。这么看，不确定性不再是负担，反倒成了一种动力，促使代码更通用的动力。&lt;/p&gt;

&lt;p&gt;总是保留各种可能性，给自己留后路。鸡贼，但鸡贼得有理有据，这个理就是最大熵原理。算法的应用，不光是写代码的过程，工作乃至生活，无所不在。关于不确定性和最大熵原理，这里不展开了，想进一步了解的，请戳文末的“阅读原文”。&lt;/p&gt;

&lt;p&gt;小到一个接口参数，大到一个产品功能，把它当成一种未知，忽略“绝对不改”的鬼话，抛弃主观假设，包容更多可能，前期，多花点时间思考，后期，省出时间喝茶灌水，看路过的世界。&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Jul 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/07/30/provision-doubt.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/07/30/provision-doubt.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>“阿法狗”的武功秘籍</title>
        <description>&lt;p&gt;5月，下围棋的阿法狗，用战胜李世石霸占了我的头条，这两天，会美图的“阿法狗”，开始入侵我的相册，名字不土了，叫Prisma，挺秀气。&lt;/p&gt;

&lt;p&gt;先来感受下她的画风。呃，准确来说，是凡高风，毕加索风，列维坦风……&lt;/p&gt;

&lt;p&gt;随手拍一张：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-1.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择“Candy”派，变酱紫，挂在画展里也毫无违和感。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-2.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;换个“wave”风看看：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-3.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拿来装逼，不会有被雷劈的风险。&lt;/p&gt;

&lt;p&gt;“我们会像一名真正的艺术家一样重新创作”，创始人Alexey说。据说，和凡老，毕老比起来，他们的创作速度快得不只一点点，秒秒钟搞定一幅艺术品。激动地试了下，然并卵，来自网络错误和服务器繁忙的硬伤不下50点。一张图片跨越万水千山终于到达远在俄罗斯的服务器，却被礼貌地告知已经人满为患，请再跑一趟。&lt;/p&gt;

&lt;p&gt;想想创作总是艰难的，也就原谅他们了，尤其这等上乘功夫，一群内功深厚的服务器合力方能驾驭，远非势单力薄的手机所能修炼。&lt;/p&gt;

&lt;p&gt;可等待也是艰难的，排队的时候，做点什么呢？不如扒一扒这位俄罗斯大师的秘籍吧。她量产艺术品的过程是，从经典的画作中提炼画风，再分析用户上传的照片，两个结合，duang，一幅全新的作品诞生了。和阿法狗相似的地方在于，她们都修炼了一种深度学习算法，卷积神经网络。&lt;/p&gt;

&lt;p&gt;卷积神经网络，没有金庸”八荒六合唯我独尊功”式的朗朗上口，却不妨碍我们窥探其奥秘，下面就翻一翻这本秘籍。&lt;/p&gt;

&lt;p&gt;开篇第一式，卷积。&lt;/p&gt;

&lt;p&gt;要修炼卷积，必须酒足饭饱。每次修炼前，得先查下胃。饱餐一顿后，肚子里剩余的食物量在慢慢减少，这个过程可以表示为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-4.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;差不多五个小时，肚子里的东西就消化完了。如果练功偷懒，体能消耗慢一些，也可能是六小时，七小时。&lt;/p&gt;

&lt;p&gt;不管怎样，为了早日修成此功，你三餐不落，早上7点，中午12点和晚上6点，各吃了一顿，只是量稍有不同，也用一张图表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-5.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;肚子里剩余的食物就是前面没消化完的，和时间的关系可以表示为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-6.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，练功偷懒的人，耗能少，上一顿没消化完就吃下一顿了，曲线就变成这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-7.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;师傅，我吃饱了，咱开始教招式吧。&lt;br /&gt;
我已经讲了。&lt;br /&gt;
可，明明只说了吃饭。&lt;br /&gt;
招式就在饭里。&lt;br /&gt;
……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要练成第一式，吃饭除了要准时，姿势也很重要。不论是狼吞虎咽，还是细嚼慢咽，只要是相同的吃法，都要有相同的消化法，要切换自如，还要能叠加，这叫“线性”。无论是中午吃，还是晚上吃，时间虽不同，只要吃法一致，消化方式也必须一致，这叫“时不变”。&lt;/p&gt;

&lt;p&gt;达到这一境界，便练成了第一式。对于这样的肠胃（线性时不变系统），消化快慢的规律，叫“冲激响应”，取决于修炼者的身体情况，三餐吃的饭量是“输入”，肚子里剩余的食物量是“输出”。输出和输入的关系就叫“卷积”，函数f和h的卷积写成：&lt;/p&gt;

&lt;center&gt;h (x) = f ⊗ g  &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“可是，画画涉及的是图形图像处理，和“吃饭”如何能联系在一起呢？”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;吃饭的过程也可以理解为，根据特定的规律（消化），把若干份不同的信息（饭）混合的过程。图片是长宽固定的像素矩阵，它本身就是一份信息。和谁混合呢？我们人为制造的另外一个矩阵（卷积核），具体什么样的矩阵取决于我们需要达到什么样的目的。混合后得到的，就是机器学习里经常提到的“特征”。&lt;/p&gt;

&lt;center&gt;feature map = input ⊗ kernel  &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;比如，我们想保留图片内物体的轮廓，去除颜色，就可以这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-8.webp&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，细节要比这个复杂一些，并不是直接用整个图片矩阵计算，而是逐一滑动窗口计算，注意看动图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/alphago1-9.gif&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“咦，上面说的明明是卷积，这张图里怎么是乘积呢？”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;问得好（眼太尖），但是要回答好可不容易。肚子里剩余食物显然是随时间的变化而变化的，这种变化是发生在“时域”上的。图片在采集特征之前，做了傅里叶变换，从时域转到了频域，而时域上的卷积就是频域上的乘积。因此，处理图片时的乘积和吃饭时的卷积，不仅不矛盾，而且在本质上是一回事。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“傅里叶变换是个什么鬼？”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;傅里叶变换，卷积的姊妹心法，20世纪最重要的公式，之一，一旦掌握，卷积大法也就指日可待。傅的名声大噪，在于它是众多其它法门的基础，犹如小无相功，可催动少林七十二门绝技。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“这么牛逼，赶紧讲讲。”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;没问题，只是这里篇幅太小（能力有限），施展不开（讲不清楚），还请移步知乎，看韩昊对此所做的精妙阐述。&lt;/p&gt;

&lt;p&gt;咱们还是回来继续撸卷积。Kaggle——机器学习界的少林寺，流行这么个说法：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Feature engineering is the most important skill to score well in competitions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;“用人话讲就是，特征定得了，功夫才能好。”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;没错，异于其它事物的任何属性都是特征，轮廓，颜色，亮度，质地……凡老，毕老的画各有特点，他们的画风就是众多特征的集合。图片和卷积核运算后，去除了无关的信息，只留下这个核关心的信息，从这个角度看，卷积核就是筛子。构造足够多这样的筛子，就可以量化地取得很多特征。看似只可意会，不可言传的“画风”，卷积大法一出，便手到擒来。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“吹牛，若真这么简单，论资排辈，也轮不到看特征了。”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;嗬，变聪明了嘛。构造合适的卷积核，颇费脑筋，怎么办？让机器自动帮我们选择合适的卷积核。具体如何操练？且看下回，神功第二式——神经网络。&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Jul 2016 13:04:07 +0800</pubDate>
        <link>http://localhost:4000/machine-learning/2016/07/25/alphago-kungfu-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/machine-learning/2016/07/25/alphago-kungfu-1.html</guid>
        
        
        <category>machine-learning</category>
        
      </item>
    
      <item>
        <title>魔都有多少喵星人？</title>
        <description>&lt;p&gt;据说曾经有位西方记者问周总理，中国有多少厕所，周总理回答有两个，男厕所和女厕所。很机智，但也回避了这个问题。今天我们不回避，来聊了聊一个类似的问题，魔都有多少只猫。&lt;/p&gt;

&lt;p&gt;问题很刁钻，看着又有几分眼熟，“全世界共有多少名钢琴调音师？”，“多少只高尔夫球才能填满一辆校车？”，没错，这是谷歌等公司在面试时喜欢问的问题。&lt;/p&gt;

&lt;p&gt;这么问，大概不是为了碾压智商的，即使最聪明的人，也无法准确说出这些数字。开放性问题很友善，谁都能给出答案，又绵里藏针，因为对思维品质的要求很高，要在短时间内给出有理有据的回答，相当困难。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;化整为零，各个击破&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;费米是回答这类问题的大师。1945年的7月16号，内华达的沙漠深处，美国人傲骄地试爆了第一颗原子弹，远离爆点的基地里，工程师们紧张地盯着繁忙的仪表，忙得不可开交。一旁的费米，作为“曼哈顿计划”的主要领导者，却闲庭信步，玩起了撕纸片游戏，把纸片撕碎，然后扔向天空，如是几次之后，沉吟片刻，轻描淡写的说道，爆炸当量大概相当于1万吨TNT。而精确计算后的爆炸当量是2万吨TNT，只差1倍。上一刻还在各种忙乱的大家，此刻怀着错愕的心情，转入计算内心的受伤面积，“how do you know by…”。费米淡淡一笑，并没有回答，引发了几十年后Quora和果壳上的种种猜测。&lt;/p&gt;

&lt;p&gt;没有直接答案，但费米在后来的执教中留下了回答这类问题的一般性思路，Fermi-ize。&lt;/p&gt;

&lt;p&gt;这类问题通常涉及我们不熟悉的领域，或在尺度上非日常生活所能感知。直接回答，困难重重，即使答得精确，也难以让人信服。因此，第一步是化整为零，各个击破（divide and conquer）。大问题分解成小问题，混沌状态分解成已知部分和未知部分。取决于对问题领域的了解程度，可能仍然摆脱不了猜测的成分。但不同的是，此时不再是一个黑盒子，而是把其中的一个量从盒子里拖了出来，有更大的概率取得更为准确的估计。当然，在这一过程中，仍然需要鼓起勇气，克服对陌生领域的恐惧，大胆地说出我们的假设和估计，并且承认结果依然可能是错的。快速发现错误，逐步迭代，比把它掩藏起来要好得多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用树形解构问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用顺序表述的文字来描述分解和分析的过程，隐藏了子问题层级结构，面对复杂问题时便不那么直观。The Art of Insight in Science and Engineering（以下简称the art）一书中提出了树形分解法（tree presentation）。简单的问题，如“每天北京到上海的铁路客运量有多少”，可以表示为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/cat-1.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;稍微复杂一点的，如“一张纸的体积有多少？”，可以表示为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/cat-2.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中ream（令）有500张纸，-1表示倒数。一张纸的体积很难估算，分解为相对容易估算的长度，宽度，一张纸的厚度不好估计，500张好估计多了，所以，可以把厚度再次做分解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/cat-3.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分解到什么程度适合呢？到你对估算的准度有较大把握时即可。比如上面的纸张体积问题，也许对于有些人（如造纸厂的工人），一张纸的厚度，已经可以直接估算了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;依靠直觉估算&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;树形分解时，对叶子节点的估算有时不得不依靠直觉。直觉的合理性一定程度上决定了整个估算的准确性，因此有必要讨论下如何提高直觉的合理性。中学课堂上教的多次测量取平均值不失为一种方式。但考虑到平均值比较容易受极值的影响。&lt;/p&gt;

&lt;p&gt;the art中提出了几何平均的方式。并且，不是直接依赖直觉给出数值，而是考虑到右脑的特点，用问的方式来间接逼近。如，估算上海市的平均人口密度，从一个极限值开始，逐步向另一个权限靠近，如高于1000平米／人都是你直觉上判断不太可能的，那么记下1000这个数值。逐步向下，直到一个很小的数值，如低于50平米／人后，直觉上会说，局部地区也许会达到或低于50平米一个人，但整个市平均这么低，可能性很低，所以最终给出的平均值应该是sqrt(50*1000)，即223.6平米／人，或者说4472人／平方公里。这和2010年人口普查时的3631人／平方公里相差不远。&lt;/p&gt;

&lt;p&gt;要选择合适的单位进行估算。对我的直觉来说，每人占多少平米比每平方公里多少人更容易估计，因此我选择前者为单位，而不是后者。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;蒙特卡罗方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有些领域在生活中几乎不会涉及，毫无直觉可言。比如圆周率π，大概没有人能凭直觉说出它约为3.14吧。这时候，需要直觉之外的方法。同样是在“曼哈顿计划”，S.M.乌拉姆和冯·诺伊曼提出了蒙特卡罗方法。其原理是通过大量随机试验，统计样本，计算所需要的值。&lt;/p&gt;

&lt;p&gt;用蒙特卡罗方法估算π可以这么做。在正方形内部画一个相切的圆，那么，它们的面积之比是π/4（π*r^2/(2*r)^2）。在这个正方形内部，随机产生10000个点，计算它们与中心点的距离，从而判断是否落在圆的内部。如果这些点均匀分布，那么圆内的点应该占到所有点的 π/4，因此将这个比值乘以4，就是π的值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/cat-4.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回到开头的问题，魔都有多少喵星人？&lt;/p&gt;

&lt;p&gt;我们可以利用上面的树形分解和直觉估算法进行估计。因为问题结构比较清晰，可以在脑子里迅速画出树形图。野生的和家养的在数量上相差不大，因此总数应该是后者的两倍。上海市2300万人（常识，差不离即可，如果缺乏这个常识，则利用上面的人口密度估算）, 由于上海市的生育水平较低，同时存在大量外来人口和单身年轻人，因此家庭的平均人口应该比较低，大概2.2人一个家庭，通过对身边朋友同事的不完全采样，以及直觉估算，得出全市家庭的养猫概率应该是5%左右，这样算下来，大概有2&lt;em&gt;23000000&lt;/em&gt;1/2.2*0.05，即104万只猫生活在魔都。&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/math/2016/07/18/number-of-cats-in-shanghai.html</link>
        <guid isPermaLink="true">http://localhost:4000/math/2016/07/18/number-of-cats-in-shanghai.html</guid>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>扬长还是克短</title>
        <description>&lt;p&gt;有限的精力, 你想用来弥补不足, 还是用来强化优势?  去年还是前年的某个下班路上, 和3D, SM聊起这个话题. 三人略有争议, 当时的对话过程早已忘却, 留下这么根线索牵着, 牵出一些零碎的思考.&lt;/p&gt;

&lt;p&gt;上周又和3D提起这个问题, 他回答说, 如果缺点很致命, 应当去克服缺点, 如果不那么致命, 应该继续拔高优势. 显然这家伙比当年进(鸡)步(贼)了, 说话滴水不漏. 就这个问题, 我们就不关注描述的严密性了, 抓其主干, 或者说一般情况即可. 发现问题本身的存在, 并有意识地去思考, 从而有选择性地分配精力,  这是讨论这个问题的意义所在. 因为, 一旦没有意识到, 或放弃选择, 就有别的力量或人插手, 替我们选择. 其结果是, 听天由命, 撞大运.&lt;/p&gt;

&lt;p&gt;美国管理学家彼得提出木桶原理, 一只水桶能装多少水取决于它最短的那块木板. 在一定程度上回答了这个问题. 即, 每个人都应积极发现自己的短板，并努力补足它. 很有名的理论, 我们很早就被这样教育, 也因此为大众所接受.  但这个原理的成立, 其实有一个前提: 木桶是水平放置的. 也就是说, 每一块木板所承担的作用, 或对于整体的重要性是一致的. 貌似很容易满足的前提, 其实不然, 这个世界并不那么”平均”,  或者说, 木桶其实是斜放的.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201607/tilt-barrel.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;小到个人, 大部分人的左右手灵巧程度不同, 左右眼的近视程度不同, 因为我们对它们的依赖和使用程度不同; 大到公司, 对于市场导向的公司而言, 市场这块板的重要性显然大于运营这块板. 运营的短, 不太会影响公司的成败, 自然不太需要花精力去弥补它的短.&lt;/p&gt;

&lt;p&gt;后来的新木桶原理进行了修正. 进化点在于认清了现实情况, 现实就是斜的, 而不是正的.  经过恰当的旋转, 短板承担的作用小了, 长板起的作用大了, 进而容纳的水更多了.  在倾斜角度一定的情况下, 去弥补短板所带来的收益就不那么明显.反而是长板的强化, 以及围绕长板构建辅助板, 就显得更加重要.&lt;/p&gt;

&lt;p&gt;长期以来, 我一直秉持”问题导向”的思维方式, 甚至引以为傲, 不停地发现问题, 解决问题, 进而趋于完美, 多好. 回顾一季度工作时, 第一次明确地意识到这个思维方式的缺陷. 它其实就是传统木桶原理的思维方式, 专注在找不足, 改不足. 本质上, 它只是木桶原理换层皮, 伪装了下而已. 看, 一个原本非常容易识别的低级思维方式, 换个马甲, 就无法识破了, 不仅不能识破, 还奉如圭臬. 认知的艰难, 可见一般.&lt;/p&gt;

&lt;p&gt;为什么容易专注于弱点,短处，而不是优势呢？《管理成就生活》一书中, 有段话很好地解释了:&lt;/p&gt;

&lt;p&gt;弱点之所以会吸引人们的注意, 是因为它们会带来麻烦. 看出一个人干不好什么, 并不需要特别的智力或经验. 而且, 确定一个人的弱点, 也不需要跟他深交. 然而要想找出一个人的优势, 不仅需要智力, 经验和沟通, 甚至需要更多的东西. 必须对一个人感兴趣, 才能发现他的优势. 此外, 找出人们的优势非常花费时间.&lt;/p&gt;

&lt;p&gt;对别人如此, 对自己, 对组织机构, 何尝不是如此?  况且, 消除一个弱点并不意味着会自动形成一个优势, 它仅仅是减少了一个弱点而已.  如果有个外语很烂的同学跟你说, “我终于及格了, 我可以当翻译家了”, 你大概也只会回答”呵(S)呵(B)”. 成就乔布斯的, 是他这颗星球上无人出其右的产品能力, 不是他克服怪癖和不近人情的缺点, 事实上, 他也没去克服.&lt;/p&gt;

&lt;p&gt;“解决的问题不管多有必要性, 都不会创造成果, 而只能防止损失. 只有利用好机会, 才能产生好结果.”&lt;/p&gt;

&lt;p&gt;“机会导向”或者说”优势导向”, 我努力用它来取代”问题导向”的思维方式. 单点突破, 极致发挥. 从团队角度看, 发现各个的长处, 在影响力所及的范围内, 把它放大到最大, 让他站出来, 在这一领域带领整个团队前进. 缺点怎么办? 发现它, 了解它, 但不是为了消灭它, 而是出于另外一个完全不同的目的: 避免依赖它.&lt;/p&gt;

&lt;p&gt;哦, 对了. 上面说了这么多, 都是忽悠你的, 为什么我更愿意去扬长, 而不是克短?因为克短真的很难. 懒癌, 拖延症, 多年不治, 已弃疗…&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jul 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/07/09/advantage-disadvantage.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/07/09/advantage-disadvantage.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>谷歌范儿</title>
        <description>&lt;p&gt;《重新定义公司》一书， 概括起来， 讲了两个方面：创意时代对人的要求， 和创意时代对公司的要求。 本文大部分内容是关于第一个命题的摘要。&lt;/p&gt;

&lt;p&gt;在谷歌， “谷歌范儿”（Googleyness）与一般认知能力、职位相关知识以及领导经验并列为评判人才的四大板块。所谓“谷歌范儿”，包括上进心和抱负、团队精神、服务精神、倾听及沟通能力、行动力、效率、人际交往技巧、创造力以及品行等特质。&lt;/p&gt;

&lt;p&gt;这是“创意革命”时代对人的要求。&lt;/p&gt;

&lt;p&gt;他们认为，人类已经经历了四次大的革命，依次为工业革命，生产力革命和管理革命，并正在经历第四次革命，即“创意革命”（creative revolution）。从互联网到移动互联网，再到物联网，从云计算到大数据，基于机器学习的人工智能将成为未来商业的基础。第一，互联网让信息免费、源源不断、无处不在，也就是说，几乎所有信息都可以在网络上找到。第二，移动设备和网络让全球范围内的资讯共享及持续通信成为可能。第三，云计算让人人都能以低廉的价格现付现购地使用强大的计算功能、无限的内存空间、精密的工具和各种应用程序。三股强大的科技狂潮汇集在一起，让多数行业的大环境发生了乾坤挪移， 也让在第二， 三次革命的产生要素──知识， 在一定程度上被机器代劳了， 而人突出的价值则在机器无法胜任的“创意”上。&lt;/p&gt;

&lt;p&gt;因此， 这个时代的弄潮儿是“创意精英”。他们不仅拥有过硬的专业知识，懂得如何使用专业工具，具备充足的实践经验， 还有常人不具备的特质。&lt;/p&gt;

&lt;p&gt;2002年的一个周五， 拉里·佩奇在谷歌网站上闲逛时发现搜索结果的广告很烂， 但只是在公告板上贴了个字条， 并没有向任何人透露， 更没开紧急会议。第二周的周一清晨5点， 一位搜索工程师发邮件说他和几位同事利用周末时间拿出了一个解决方案， 通过定义“广告相关度数值”来评估广告与搜索请求的相关性，然后决定广告是否出现，以及出现在页面的什么位置， 而这就是后来价值几十亿美元的AdWords的核心理念。&lt;/p&gt;

&lt;p&gt;到底是什么驱动了并不直接负责此业务的员工， 自发组织去解决别人的问题呢? 书中描述了“创意精英”的很多典型特点， 在我看来， 其中最重要的几项包括:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好奇心强&lt;/strong&gt;
很难想象光责任心强就可以解释上述行动， 一定是有更加原始的驱动力。 最原始的力量莫过于小孩子刚开始认识这个世界时的好奇心。 因此， 我把它列为首位。&lt;/p&gt;

&lt;p&gt;创意精英们总是在提问，绝不满足于守常不变。他们善于从各处发现问题，自信解决问题的人非自己莫属。他们喜欢做有挑战性的事，不惧怕失败，这要么是因为他们觉得自己总能从失败中挖掘出宝贵的财富，要么就是因为他们自信即便失败也能重整旗鼓、下次再战。&lt;/p&gt;

&lt;p&gt;绝大部分人都不喜欢不确定性。而创意精英与一般人不同，他们就爱自己动脑筋想对策。他们“适应性强，能够在这令人眩晕的环境中保持随机应变的灵敏”。实际上，一纸宣称能解决一切问题的计划得不到创意精英的信赖，他们宁愿为“不完美”的计划投入精力。充满激情地探索未知事物， 这正是好奇心的表现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自动自发&lt;/strong&gt;
他们不会坐等别人为他们指出方向，不拘泥于特定的任务，也不受公司信息和计算能力的约束。他们不被职位头衔或企业的组织结构羁绊住手脚，甚至还有人鼓励他们将自己的构想付诸实现。对于有悖于他们自己信念的指示，他们会选择充耳不闻。他们注重自己的理念，也会依据自己的理念主动行动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;心态开放&lt;/strong&gt;
他们可以自由地与他人合作，在评判构思和结论时，他们看重的是优点和价值而非出处。他们用不同于你我的崭新视角看问题，如果出现不同意见，他们不会选择缄口不言。有的时候，甚至能还能跳出自己的视角，因为他们懂得如何在必要时充当变换视角的“变色龙”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;擅长分析&lt;/strong&gt;
他们对数据运用自如，可以利用数据做出决策，同时也懂得数据的误导性，因此不会沉迷其中。他们认为，数据对做判断大有帮助，但绝不会被数据牵着鼻子走。他们具有多领域的能力，经常会将前沿技术、商业头脑以及奇思妙想结合在一起。&lt;/p&gt;

&lt;p&gt;以上，谷歌范儿。&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/02/20/google-style.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/02/20/google-style.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>你想要的是你需要的吗</title>
        <description>&lt;p&gt;前几天Z同学若有所悟地说，原来产品和业务方跟你说的，不一定是他真的需要的，原原本本按他们说的做，很有可能最后并不解决他们的问题。&lt;/p&gt;

&lt;p&gt;诚哉此言！和需求方打交道久了，大部分程序员都会有的感慨。然而这并不是他们故意或不用心，因为你描述的，你想要的确实不一定是你需要的。&lt;/p&gt;

&lt;p&gt;乔老爷的遗训尤在耳边，“用户根本不懂他们想要什么，除非你秀给他看”。福特也说，“如果问人们想要什么，他们会说要一匹更快的马”。&lt;/p&gt;

&lt;p&gt;受限于认知水平和环境约束，当事人往往对于可能的选项没有概念，用美国前国防部长拉姆斯菲尔德的话说，叫着未知的未知。比如，对于福特汽车发明前的年代，大众的字典里根本没有“汽车”这个词，自然打死也想不到，除了骑马还可以开车。&lt;/p&gt;

&lt;p&gt;当然，最常见的要属对需求的描述不够本质。人的大脑更拿手具象思维，而不是抽象思维。这在大部分时候是没问题的，比如，口渴了，直接说想喝水，说我想解渴，反而会让人一脸疑惑。这里的关键点在于，是否具备准确描述解决方案的能力。如果很清楚这就是最优或唯一的对策，OK，直接把这个对策当成需求。如果不是很有把握，还是不要冒这个风险，至少可以在提供对策的同时，描述下原始需求或面对的问题，给对方一个考察更优对策的可能。在福特的例子里，可以这么说，我需要一匹快马，或者你有别的更快出行方式，也行。可惜的是，多数“上帝”都是甩手掌柜，并没有为“小二”考虑的意识。那么，小二们，尤其是有了这层认识的小二，比如Z同学，就得学会自己来挖掘，多提问，溯本求源。&lt;/p&gt;

&lt;p&gt;程序员的另一大抱怨是，无休止的需求变更。虽为程序员，我想说，这可能是我们所做事情的固有特点。很多时候需求方只能战战兢兢地说，我认为这样能解决问题，实现目标，但没试过之前，我不敢保证实际就是这样。当事人自己的需求尚且如此，更别提广大用户的需求了。需求不是一次性把握住的，需求是逐步接近的，而且很可能是进两步退一步的螺旋式接近的。这是一门实践学科，需要观察，探索和试错。根据反馈及时做出调整是它的固有特点，不应该是负担。当然，没收到反馈就发起的变更，没有验证任何假设，确是要极力避免的。&lt;/p&gt;

&lt;p&gt;防止变更成为沉重负担，首先要转变认知，拥抱变化。接着要切割，把大需求切割成小需求，降低每个需求失败的成本。对每个需求使用“PDCA”模型持续改善。用上个需求的检查结果调整下个需求的计划。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201601/adjust.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前的普遍毛病是，光有计划-执行，检查和调整做的少，做的不够科学。必须通过测试让数据说话，表明设计的有效性，而不是一直用主观判断来说服人。少了后两个环节，就无法建立闭环，迭代将退化为重复。这是个足够大的话题，可以另开一篇了。&lt;/p&gt;

&lt;p&gt;50年代，心理学家马斯洛提出了他的需求层次理论，把人的需求概括为，生理需求，安全需求，社交需求，尊重需求，和自我实现需求。前三者是基本需求，一旦被满足，人们不太会过多考虑，甚至不再意识到它们是种需求，进而当成是理所当然的。尊重需要，包括要求受到别人的尊重和自己内在的自尊心。自我实现需要，指通过努力，实现自己的理想和抱负。它们是近乎无止境的需求，永远无法被真正满足。&lt;/p&gt;

&lt;p&gt;如果把马斯洛模型和“想要的，需要的”结合起来看，会发现一个有意思的现象，你最急切想要的反而是你最不需要的。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/01/17/need-want.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/01/17/need-want.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>工具意识</title>
        <description>&lt;p&gt;“为了上一天的新品, 我们得两个人花四个多小时, 都快奔溃了”. 最近常常听到业务方诸如此类的抱怨, 大量的人力浪费在重复的机械劳动中. 向来对体力劳动怀有嫉恶如仇之情的我, 听完后, 先是表示婶婶的同情, 即而又是一阵羞愧, 有我们技术坐镇, 落后的体力劳动为什么还能大行其道?&lt;/p&gt;

&lt;p&gt;这背后可能是业务流程问题, 可能是任务的优先级问题, 似乎没什么新内容可挖掘. 但有一个更深层次的原因却很容易被忽视: 使用工具的紧迫感. 若是现成的工具放在眼前, 断没有不用的道理. 所以, &lt;strong&gt;缺的不是使用工具的基本意识, 缺的是决不做牛做马干体力活的偏执, 是没有工具就要找工具找不到工具就要开发工具的紧迫感, 是不用最好的工具就会落后就会被淘汰的危机感&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具是第一优先级&lt;/strong&gt;
人类能制造和使用工具, 从而把自己和其它生物区分开来了. 发明并大规模使用蒸汽机后, 人类迎来了工业革命时代, 期间创造的财富超过了近代之前人类创造的一切财富总和. 近几十年, 计算机,互联网的普及, 让我们进入信息革命时代, 这时期创造的科学知识再次超过了此前人类积累的知识总和. 撬动这些成就的恰恰是我们手中的工具.&lt;/p&gt;

&lt;p&gt;人的价值不在于做重复工作, 尤其是在互联网行业, 任何一家有追求的公司, 任何一家想要有所成就的公司, 主动也好, 被动也罢, 都必须把人从简单的重复劳动中解脱出来, 让他们专注在真正产生价值的创造性活动上. 越是机械重复的工作, 就越适合用工具, 用技术来解决.&lt;/p&gt;

&lt;p&gt;黄易山是Facebook的前工程主管, 他有个鲜活的例子. 05年到06年中期, Facebook经历了一段大规模招聘客服人员的时期, 在1000万用户时有20个客服. 但他们立刻意识到不能这样线性发展下去. 便派了一个技术小组和客服人员密切合作, 分析他们的工作内容, 开发针对性的工具来接管苦力活, 让他们专注在人擅长的领域. 很快, 用户增长了30倍达3.2亿, 而客服只是增加了3倍, 差不多60-70人. 没有任何一个外部产品或管理咨询公司能够提供这种量级的效率提升, 更何况简单地用人力扛.&lt;/p&gt;

&lt;p&gt;现在创业的成本越来越低, 其中一个点就是因为有越来越先进的工具. 现成的开源产品节省了开发成本, 云的出现, 更是连自己买机器的运维成本都省去了, 几个人的小团队就能建起完整的网站. 而计算型工具比传统物理工具更高级的地方还在于, 它们能很方便地组合, 叠加使用, 从而获得几何级别的效率提升. 工具的使用, 直接影响了公司业务效率, 人员招聘, 运营成本等等.&lt;/p&gt;

&lt;p&gt;因此, 工具应是第一优先级. &lt;strong&gt;引入, 开发工具, 并持续更新, 孜孜不倦地使用更好的工具, 应优先于大部分产品特性开发&lt;/strong&gt;. 决大多数人并没有这个认识, 甚至不敢这样想, 因此, 让他们来评定优先级时, 工具的引入总是落后于业务开发. 长此以往, 再多人也累成狗. 此言一出, 难免是要引来口水的. 不必做过多的争论, 本来就没有绝对的事, 这里重点强调的是工具的重要性并没有得到足够的认知. 包括我自己, 身为技术人员, 很多时候以业务为借口, 拖延了技术和工具的升级, 有时候又偷懒不愿意去发掘和学习新的技术, 工具.&lt;/p&gt;

&lt;p&gt;有趣的是, 在被繁重的体力劳动压得透不过气的时候, 似乎更难想到要另辟蹊径, 仅有的注意力也被眼前的堆积如山的工作量吸光了, 连换个现成轮子的精力都没了, 何况造轮子? Twitter上刚好看到一张图, 形容这个再生动不过了.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201512/wheel-recommend.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具意识应根植在公司文化中&lt;/strong&gt;
工具优先的认识, 应在公司文化上体现, 而且越早越好。 让使用工具的意识根植在每一个人的脑海里, 不论是做技术的, 还是做运营的, 做市场的. 培养起对一切重复的体力劳动嫉恶如仇般的敏感度, 浪费生命的危机感会迫使每个人想方设法去使用工具. 没错, 这只是第一步, 但却是最重要的一步. 至于怎样找到工具, 哪个工具更好, 就各显神通了, 不行就交给工程师们吧!&lt;/p&gt;

&lt;p&gt;还要在资源部署上体现工具优先, 让最优秀的员工致力于提供更好的工具. 常听到有工程师报怨工作成就感不强, 原因可以分析很多, 大概又可以归纳为”他感受不到自己对别人的影响”. 给同事提供更好的工具, 让他们实实在在感觉到对别人的影响力, 偶尔收到来自身边的积极反馈和夸奖, 工程师们的虚荣心指数爆表, 这算是工具优先的附加收益吧. 看到这里, 开水同学一定笑了, 给凳子开发了无耻的点赞工具后, 好评如潮, 这小子就沉浸在幸福的海洋里, 意淫着开个淘宝店开卖…&lt;/p&gt;

&lt;p&gt;画面很美好, 现实很丑陋. 因为在前期, 使用工具没有直接铺人力来得快速, 而且性价比不如人力投入高! 这是个功利的年代, 功利的行业, “成本意识”和”效果导向”早已深入人心, 我们非常在乎性价比, 两相对比, 工具自然让人很失望.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201512/linear-expo.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;顶住压力, 跳出局部最优的蜜罐, 需要远见, 需要勇气和毅力. 但用不了多久, 它们就将画出一条华丽的弧线. 展现在眼前的将是潮平两岸阔, 风正一帆悬, 望一眼身后苦苦挣扎却渐行渐远的同行们, 满意地笑了笑, 随即又举目远眺, 扬帆启航.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2015/12/20/tool-awareness.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2015/12/20/tool-awareness.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
  </channel>
</rss>
