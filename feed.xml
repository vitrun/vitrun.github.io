<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Food for Thought Expected</title>
    <description>while [ 'alive' ]; do think &amp;&amp; act | tee blog; done</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 07 Jul 2018 13:13:29 +0800</pubDate>
    <lastBuildDate>Sat, 07 Jul 2018 13:13:29 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>编程界的剑气之争</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/2017.4/kungfu.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;华山派曾有剑宗和气宗之分。双方你争我夺，势不两立。是权力之争，也是道统和武力之争。&lt;/p&gt;

&lt;p&gt;咱编程界也有指令式程序（如，面向对象）和函数式编程两派。他们的关系虽不至于剑拔弩张，却也相当紧张。表面是语言风格之争，其实是方法论之争。&lt;/p&gt;

&lt;p&gt;话说，当年高级语言诞生不久，场面就开始混乱了。面向对象派，又称bottom-up派，他们从底层硬件开始向上走，在不牺牲性能的前提下，逐步增加抽象层级，不断接近数学。Fortran, C/C++, Pascal, Java以及C#等等都属于这派。函数式编程派，又称top-down派，坚持从数学出发，逐渐减少抽象级别，以接近现实问题，并获得硬件支持，为了保持概念完整，牺牲了部分性能。其拥护者有Algo，Lisp，Smalltalk和Haskell等。&lt;/p&gt;

&lt;p&gt;双方坚持信仰，互相揭短。top-down说，哎呀，别这么快向硬件妥协，那会把选择局限在少数几个不可逆的设计中；而且，mutable太可怕了，尤其是在并发情况下，冷不防就来个意外。bottom-up派则说，别给我套这么多数学，我很难兼顾垃圾回收、函数调用……而且，性能、性能、性能，我不能牺牲任何性能；immutable太理想化了，毕竟现实世界在变，试想，如果date和random不变，调用它们有什么意义？&lt;/p&gt;

&lt;p&gt;计算机科学家Erik Meijer说，每当新语言出现时，他总会看看技术规范。这对他来说，也许就像喝着咖啡看报纸，轻松自如。但他在一次分享中说，有一门语言，他根本读不懂，一看就犯困，比什么安眠药都更有效。你可能会觉得那一定是门高深的语言，然而，这门语言就是很多人熟悉的Java8。他觉得lambda，method reference这些东西实在太复杂了。怎么办？每当碰到复杂的东西，他就听Leslie Lamport（图灵奖获得者）的话：“我们应该多用点数学。”&lt;/p&gt;

&lt;p&gt;他知道，大部分程序员都惧怕数学，就更别说如何用数学理解语言，如何在编码中应用数学。所以他上台演示，分享了《Category Theory, The essence of interface-based design》。老头子精力十足，对照着讲数学概念和函数式编程中的语言概念，很是精彩。时不时揶揄下Java：lambda演算早在1928年就提出了，Java作者Gosling一度声称没必要支持lambda，但最终还是在Java8中支持了，这是为什么？因为我们畏惧数学。但我们不应该畏惧，搞数学的人都是很聪明的，我们应该从他们身上偷师点东西。&lt;/p&gt;

&lt;p&gt;年迈的Java徘徊良久，终于接纳函数式编程；年轻的Scala和F#是与身俱来的多面手，两边讨好；新生的Kotlin长了一张面向对象的脸，却又兼俱一点函数式气质。争吵了近70年，两派终于开始弥合了。&lt;/p&gt;

&lt;p&gt;纵是阳春白雪， 也有下里巴人的时候。多核时代下并发需求的普及，以及日益复杂的软件架构，使得指令式编程力不从心。我们需要更有力的武器。Brian Beckman说，我们将无可避免地接触monad，因为函数式编程正迎面呼啸而来。&lt;/p&gt;

&lt;p&gt;这段历史似曾相识，关于剑气宗的高下，岳不群有段论述：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;剑宗功夫易于速成，见效极快。大家都练十年，定是剑宗占上风；各练二十年，那是各擅胜场，难分上下；要到二十年之后，练气宗功夫的才渐渐的越来越强；到得三十年时，练剑宗功夫的便再也不能望气宗之项背了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但我们是文明的现代人，何必争个你死我活。我们要融合，要扬长避短。总有一天，犹太教、基督教和伊斯兰教的朋友们会在他们共同的圣地——耶路撒冷，愉快地生活的，是不是？哦弥陀佛！&lt;/p&gt;

&lt;p&gt;有个问题摆在所有程序员面前：如何提高软件质量？这是个可以写好几本书的话题。我敢打包票的是，这些书都会讲code review、unit test、 QA……其中单元测试（或者包括集成测试）的争议最大。写测试确实费时费力，又不一定讨好。我认识的人中就有坚决肯定和坚决否定两种极端。我认为这是个性价比的问题，如果能自动生成单元测试就好了。于是，一度想用AI搞个这样的项目（事实是确实有人在研究这个，比如randoop，曾测出了jdk的bug）。但转念一想，又打住了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;People are always more willing to work harder than they have to than to work smarter than they’re able to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;质量的关键并不在测试之类的防御性措施上。测试是有意义的，但就像公路两边的防护栏，能防止你掉下悬崖，却并不能把你带向目的地。我们应该回到业务本身，琢磨如何更优雅地设计和实现它，这是科学、艺术，是编程之美，也是我一直提倡design review的原因。但关于设计以及架构，我发现的更多是其中的“艺术”成分，也就是依靠经验和模仿习得的那些。是否有完整的章法和可言传的套路呢？我们需要更多科学来指导代码的设计和组织。与其说我们需要函数式编程，不如说我们需要更高的视角看待编程。&lt;/p&gt;

&lt;p&gt;带着这个疑问，我撞见了category theory，中文叫范畴论，不知道这个鬼见了都犯愁的理论，能多大程度解决问题。但我愿意一试，没准某一天，我能以气御剑？&lt;/p&gt;

&lt;p&gt;注：上面都是废话，本文重点是以下链接：&lt;/p&gt;

&lt;p&gt;REF.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.infoq.com/presentations/Simple-Made-Easy&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=ZhuHCtR3xq8&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=JMP6gI5mLHc&lt;/li&gt;
  &lt;li&gt;https://ykode.id/making-sense-of-category-theory-6f901e39fa3c&lt;/li&gt;
  &lt;li&gt;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 06 Dec 2017 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/computer/2017/12/06/fp-vs-op.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2017/12/06/fp-vs-op.html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>程序员的核心能力</title>
        <description>&lt;p&gt;程序员要掌握的知识，要具备的能力实在太多，多得头发都不够掉。&lt;/p&gt;

&lt;p&gt;大体有两大方向。一是对工具的熟练掌握，如操作系统、网络、IO、编程语言等；另一个是用代码为现实问题生成解决方案的能力，这其中最重要的是抽象能力。&lt;/p&gt;

&lt;p&gt;前一个方向是很容易意识到的，很多现象可以说明这一点，比如，世面上介绍如何使用语言、框架的书汗牛充栋；比如，很多人眼里进这一行的门槛是上1个月的语言培训课。&lt;/p&gt;

&lt;p&gt;工具的意义不容否认，为此我还写过一篇&lt;a href=&quot;/computer/2015-12-20-tool-awareness.md&quot;&gt;《工具优先》&lt;/a&gt;。但工具的生命周期其实很短，从个人发展角度看，把过多时间投入到半衰期很短的事物上，并不划算。我入门时接触的是Pascal, BasicScript, ASP, IIS，不知道现在还有没有人用这些。很多程序员也赶时髦，本来写java的，golang流行了，python流行了，学！本来搞业务开发的，大数据火了，机器学习火了，学！打的旗号自然很鲜明：持续学习。几次之后，却怅然若失，貌似没一个是拿得出手的，不过是低水平重复，换个工具，继续做原来的事而已。充其量效率提高了，但效率型工作是可替代性最强的，被其它人替代，被机器替代。&lt;/p&gt;

&lt;p&gt;一颗上进爱学习的心，怎么就被辜负了呢？因为核心能力没有提升。人的能力好比电子围绕原子核旋转，大部分情况下处于巡航状态，在这过程中不断积蓄能量，始终向核心方向用力，就会跃迁到更高级轨道（这里指更靠近核心的轨道，实际电子是更远离核心的道）。“一万小时理论”和“10万行代码理论”只片面强调了量，如果没有聚焦核心，刻意练习，只能是低水平重复，甚至轨道降级。&lt;/p&gt;

&lt;p&gt;核心是抽象能力。这个世界的运行，有讲逻辑的，也有不讲逻辑的。程序员要处理的事是讲逻辑的那部分，因为你所依赖的计算机是讲逻辑的，要让它意气用事，感情用情，目前还很困难。通过抽象，我们识别并保留逻辑部分，抛弃其它内容，然后用计算机语言翻译、实现这个逻辑，进而解决问题。&lt;/p&gt;

&lt;p&gt;抽象这个词，本身就挺抽象的。到底什么是抽象？&lt;/p&gt;

&lt;p&gt;抽象是去除多余和细节。比如下面这个标志，一看就懂是座拱桥，但并没有显示拱桥的幅度、宽度和长度，因为这些数据对于你意识到这是一座拱桥并没有帮助。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2017.4/bridge.webp&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;什么是多余信息，取决于目的。考虑地铁换乘图，其目的是告诉乘客该搭哪条线，在哪里换乘，所以保留了结构关系：站点的分布，以及线路的汇合点，但忽略了物理关系：站点的地理位置、相对距离，甚至扭曲了线路的方向。而如果是开车用的导航图，则必须保证比例尺和实际情况一致，方向也不能有差错，以免误导。&lt;/p&gt;

&lt;p&gt;抽象是建立模板或蓝图。不少公司里有邮件模板、文档模板、PPT模板、报销单模板，等等，它们规定好了结构、风格，并留出一个个空白，使用的时候填空就好。模板描述不变的内容，变量则延迟到使用场景中确定。Java编程时，经常要应用各种设计模式，其实质是通过抽象，固化不变的，封装变化的。比如，很常用的模板方法，流程和步骤无论什么场景都不变，已经在父类写好了，将具体场景的方法在父类里声明，但延迟到子类实现，封装的是方法实现。又比如，创建对象时，不常写new Tesla()，而是运用简单工厂模式，写成TeslaFactory.create()，因为对象的创建是易变的。与其在特斯拉多一个型号时，把所有new的地方都改一遍，不如在create方法里集中改。&lt;/p&gt;

&lt;p&gt;总之，抽象是应对变化，或者说寻找不变性的手段。既可以是不同事物之间的不变性，也可以是同一事物不同历史时间的不变性。虽然这里讲的是编程，但其应用远不止于此，看看贝索斯是怎么说的：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;我常被问一个问题：“在接下来的10年里，会有什么样的变化?”……但我很少被问到“在接下来的10年里，什么是不变的?”我认为第二个问题比第一个问题更加重要，因为你需要将你的战略建立在不变的事物上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有了上面的解释，便不难理解面向对象编程的原则：依赖接口而不是实现，依赖抽象类而不是具体类。它让代码的适应性更强，将来少改代码，少出错。同时，做一些参数设定时，更加有理有据，而不是trial and error。线程池大小怎么定？不用关心具体工作，分析阻塞和非阻塞的时间比例，应用Amdahl’s law搞定。队列大小怎么定？不管究竟放的是什么，确定你期望的排队时长，用Little’s law算下。&lt;/p&gt;

&lt;p&gt;世面上鲜有讲如何培养抽象思维的书，设计模式一类的，算搭一点边，但那是人家抽象的结果，而不是关于抽象的方法。也许我们在运用这些模式，或浏览一些工具和类库的代码过程中，偶有灵光一现，能从这些结果中反推作者的设计思想和精妙之处，毕竟它们也是抽象的结果。&lt;/p&gt;

&lt;p&gt;学习使用工具时，如果多个心眼，留意为什么有这个工具，做了什么取舍，工具于你将不仅是效率意义。做业务开发时，如果不是简单地翻译需求，多想一层，哪里易变，哪里不易变，如何隔离变化，再简单的开发，于你也有精进意义。&lt;/p&gt;

&lt;p&gt;抽象的层级可以有很多，能做多少层级的抽象是一种能力，而判断需要多少层级的抽象则是一种艺术。&lt;/p&gt;

&lt;p&gt;地上一个猴，树上七个猴，一共有几个猴？1+7=8，一共八个猴，用数字符号代替猴子，这是第一层。从对象到数字，大多数人对此熟悉到甚至没有意识到这是一种抽象。再进一层，则有些困难了，当初我理解“加速度”这个概念，就费功。不光是数量，还有结构的抽象，关系的抽象。当然，它们离我们都很远……&lt;/p&gt;

&lt;p&gt;可是，真的很远吗？当大部分人在关心如何写程序时，有人开始研究如何用程序写程序，当大部分人在关心如何看书、学习时，有人在教别人看书、学习。&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Nov 2017 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/computer/2017/11/26/core-skill-programmer.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2017/11/26/core-skill-programmer.html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>股价到底可不可预测</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/2017.2/stock-price.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;昨晚ali太屌了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;微信上，老田没头没脑来这么一句。我的第一反应是去看股价，果然屌，一夜之间涨了超过13%。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;你买了吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;略不好意思地回答：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;20股…上市当天拿到现在…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在股市大抵就是这样，赚钱的买得少，亏钱的买了一堆。辛酸血泪史，就不多提了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么会一天之内涨这么多？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;昨天开了个投资者大会&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我没有继续问，但心里埋着第二问：“为什么开个会，效果这么好？”&lt;/p&gt;

&lt;p&gt;最近，撸了个“时间交易所”，可以理解为股市的翻版，所以对这类问题稍微敏感了些。其实，对这个问题，大家多少都能回答一些：会上披露的收入增长远高于市场预期，推动股价上涨。&lt;/p&gt;

&lt;p&gt;足够简洁，但意尤未尽，有没有更底层，更系统的解释？凑巧翻出了积灰近两年的《经济学通识》，释疑解惑。&lt;/p&gt;

&lt;p&gt;要在时间流逝中发挥功能的商品或资源，叫着易耗品。易耗品的价格完全建立在人们对未来的主观估计上。&lt;/p&gt;

&lt;p&gt;股票是一种耐用品。股票的价格，是股票未来全部预期收益的现值。股票价格的变动，是人们对股票未来全部收益预期的变动。&lt;/p&gt;

&lt;p&gt;看看真正的高手是如何把握这一特点的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我决定买苹果以前主要想的是他们是不是还有可能成长，有多大的空间可以成长，威胁都可能来自什么地方，等等。我不去想他现在的股价和过去的股价。——段永平&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人们现在愿意花多少钱买一只股票，取决于他们预计将来能从中获得多少。认识一变，价格就变。阿里的投资者大会，披露了有关未来事件的信息，改变了人们的认识，进而反应在股价上。&lt;/p&gt;

&lt;p&gt;既然 “人们对事物发展变化的认识变化”决定了价格的变动，那么，认识是如何变化的？&lt;/p&gt;

&lt;p&gt;很遗憾，认识的变化没有规律。&lt;/p&gt;

&lt;p&gt;在现实世界中，一切都按自然规律，有条不紊地进行着，但在观念世界中，人们在不断形成、比较、交换和修正对未来的预期。哲学家波普尔说：&lt;/p&gt;

&lt;p&gt;只要知识是增长的，那就必定有部分知识是我们明天才知道的。&lt;/p&gt;

&lt;p&gt;尽管事物的变化是有规律可循的，但新信息的内容和披露时间，是不可预知的。今天的你不知道明天的你会知道什么。有点绕口，美国前国防部长拉姆斯菲尔德在一次记者招待会上有有段rap式的描述:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns – the ones we don’t know we don’t know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用过去的图表、曲线预测未来的趋势，是不靠谱的。于是，我默默地取关了github上预测比特币价格的repo。试图发现和掌握认识变化、信息批露的规律，也是徒劳的。怎么办？回归价值投资，老老实实研究公司的基本面，考察未来的盈利能力吧。&lt;/p&gt;

&lt;p&gt;如果还想动点“歪脑筋”呢？&lt;/p&gt;

&lt;p&gt;还是在人身上找机会吧，毕竟股市是人发明的，也是人在玩的，我们要战胜的不是客观规律，也不是股市规则，而是演对手戏的人。他人的弱点，正是你的机会。&lt;/p&gt;

&lt;p&gt;人常常是不理性的，但不理性的行为一旦被识别，就成了新的知识，就会被其他人理性地运用。对于信息披露，有人会“反应迟钝”，有人会“过度反应”，还有人会“惯性行动”。比如，大涨之后，常常出现回调，阿里这次也不例外，创新高之后，便稳步下跌。以及，大跌之后，常常过度下跌。这些是大概率重复出现的现象，于是就有人以此来牟利，而这种新认识马上又会反映到价格上。“在别人贪婪时恐惧，在别人恐惧时贪婪。”，说的大概就是这个理。只是贪婪和恐惧的程度，过度反应何时开始，惯性行动止于何处，都不是容易预测的。近年来，利用大数据技术分析 Twitter 用户的情绪预来测股价涨跌，就是一种尝试。&lt;/p&gt;

&lt;p&gt;alswl说，他新公司有同事在尝试追财报买股票，赌财报发布后股价会上涨。脑筋转得挺快，就不知道效果如何了。&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Jun 2017 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2017/06/18/stock-price.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2017/06/18/stock-price.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>不为人知的阅读模型</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/201612/reading-model.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上周讲了读书的效率问题，这周再说说质量问题。&lt;/p&gt;

&lt;h4 id=&quot;价值衰减模型&quot;&gt;价值衰减模型&lt;/h4&gt;
&lt;p&gt;永泽有个原则：“对死后不足三十年的作家，原则上是不屑一顾的”，意思是没有经受住时间考验的作品，不值一看。这个原则可以拓展为，不仅看“过去”，也要看“未来”：书中所讲的内容，在未来多少年内依然成立？时间越短，越不值得去读。毕竟，精力有限，我希望回报能长久一点。&lt;/p&gt;

&lt;p&gt;任何信息，包括书，都有保值期。&lt;/p&gt;

&lt;p&gt;只是这个保值期，不像食品的保质期一样有明确的时间点。它甚至不是一个“二值”化的阶跃函数，而是一个连续变化的曲线。&lt;/p&gt;

&lt;p&gt;有些书，价值是个常量，不随时间的变化而变化。比如数学，即使地球消失了，它依然有价值。有些书，还没写完，价值就开始衰减。比如，讲林丹出轨之类的八卦杂志。&lt;/p&gt;

&lt;p&gt;基础模型确定了，接下来要细化。哪些书是常量型的，哪些是衰减型的，衰减的速度是多少。明确这些，就不难决择了。不知道你有没有注意到，这个模型不光是适用在选书这一个场景，判断一件事值不值得做，值得投入多少精力，都可以用这个“价值衰减模型”。从一个场景、案例、细节中发现规律，总结、归纳，抽象出模型，并把它应用到其它场景，这叫迁移。理解力，决定了你能吸收多少，而迁移力，决定了你能运用多少。&lt;/p&gt;

&lt;p&gt;上周，在公司的读书分享会上介绍了《Math Better Explained》一书，着重讲了自然底数e。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;e is the base amount of growth shared by all continually growing processes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所有持续增长（其实也包括减少）的过程，都有共同的基数e。类似复利、放射性元素的衰减……e像一根线把这些原本散落的，随时可能脱落的点串了起来。我的知识架构上又多了一个钩子，可以连接原本不通的节点，又可以为以后挂载新节点做铺垫。这是我十分珍视的东西，一看到钩子型知识，就两眼放光。&lt;/p&gt;

&lt;h4 id=&quot;收益函数模型&quot;&gt;收益函数模型&lt;/h4&gt;
&lt;p&gt;价值衰减慢的，不一定对你就是好书。涉及个人时，在“价值衰减模型”基础上还要看它能给你带来多少收益。&lt;/p&gt;

&lt;p&gt;给团队贴过一篇博客：《The Immutability of Math and How Almost Everything Else Will Pass》，很让人触动的博客，它让我真正意识到了知识是存在保质期的。而上面对e的理解又提醒我，知识在保质期内应该是持续衰减的过程。你在不同地方，不同时间看的书会不经意间碰撞，融合，产生新的见解。这种碰撞是不可预期的，只有事后回顾才能发现，就像乔布斯说的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看书的收益正比于数量的平方。A看了5本，B 4本，C 3本。虽然绝对数量上A少于B和C之和，但A的收益等于二者之和。当然，前提是他们联想、撮合知识点的能力是一样的。&lt;/p&gt;

&lt;p&gt;为什么是平方？这是我臆想的，没法论证。你也可以说成是立方，阶乘。当然，不幸的话，开方也是有可能的。这不是重点，我重点强调的是，这是个非线性的关系，影响收益函数的因素有：读书量，以及所读内容之间产生化学反应的量级。我觉得大部分人的收益要好于线性函数，但又不至于好到夸张，所以用了平方。我称之为“收益函数模型”。&lt;/p&gt;

&lt;p&gt;那么，有什么启发？首先，要改变单纯追求数量的观念，多不等于好；其次，要选择那些跟你已有知识体系能产生反应的书籍。一本书，看完很长时间后，内心依然平静如水，甚至快过了保值期，还激不起半点涟漪，无疑就是一次失败的阅读。如果你也写作，看完后有没有写点什么的冲动，也是一个不错的验证方式。&lt;/p&gt;

&lt;h4 id=&quot;好莱坞大片模型&quot;&gt;好莱坞大片模型&lt;/h4&gt;
&lt;p&gt;现实生活中和人发生冲突的可能性很小，我把它转移到了书上：看书最好要能制造冲突。你带观点时，就和纸面、屏幕后面的作者来一场辩论；不带观点时，就当捣蛋鬼专门给老师难堪。不论书中内容如何，刻意制造冲突，看书的过程就是一部跌宕起伏的大戏。一会儿作者冲着你骂“傻X，还用这种过时的方式看待世界！”，一会儿你还道：“我早知道了，啰里吧嗦！”，扳回一局。这样看书确实挺累，有时候为了搞懂或者反驳对方一个论点，百度谷歌齐上阵，翻箱倒柜，扯出好多资料。但你是带情绪的，带感情的，印象深刻，以后发生化学反应的概率就大了。&lt;/p&gt;

&lt;p&gt;当然，你也可以用苏格拉底式辩论法——提问，心平气和地提问，直到对方意识到他错了。不过这有点难，毕竟苏格拉底不是想学就能学的。&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/reading/2016/12/07/on-reading.html</link>
        <guid isPermaLink="true">http://localhost:4000/reading/2016/12/07/on-reading.html</guid>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>思考，弯与直</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/201612/thinking.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;思考，不紧有快与慢，还有弯与直。&lt;/p&gt;

&lt;p&gt;我们常说，设目标提要求时，尽量稍微高出现在的能力水平，跳一跳能够着，这样对人的提升最有效。说得高大上一些，叫舒适区理论：在舒适区没有成长，恐慌区损害健康，伸展区最好。这一理论的基本假定是，人是不能突变的，即人不可能在短时间内有大变化。其背后的认知是，人是线性的。也许人确实是线性的，但重点不在于此，重点在于，它影响了我们的思维，使它表现出线性。加减乘除我们理解起来很自然，一旦到了次方，开方，阶乘，指数之后，没几个人能凭直觉理解。复利算是生活中常见的了，有几个人真切体会到它的威力了呢？又有多少人有资格笑话印度国王不假思索的豪气：“赏你这么多小麦，第1格1粒，2格2粒，3格4粒……直到64格”？&lt;/p&gt;

&lt;p&gt;我们习惯性地以线性思维来看待这世界，就像我们容易不自觉地戴上有色眼镜一样。只可惜，这个世界并不因为我们的线性思维而改变它非线性的主体本质。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;弱小和无知不是生存的障碍， 傲慢才是 ——《三体》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;能认知到思维的线性特征的人，无疑是有自知之明的人。没有冒犯的意思，自知之明在我看来，确实是个非常高的要求。认知到了你就会在常规思考后，再多想一层：会不会是我的线性思维导致我得出这样的结论，而其实它压根就不是线性的呢？甚至是不连续的、跳跃的、混沌的？不连续性比非线性还要更有冲击力，我们一再强调总结、复盘，可对于不连续的事物，归纳过去真的能预测未来吗？&lt;/p&gt;

&lt;p&gt;我了解的算法不多，其中 SVM(支持向量机)，是我非常喜欢的一个。两年前在公司内部做过一个技术分享，当然，我估计大部分都忘得一干二净了，分享的最大受益人总是分享者本人。而那句对 SVM的描述我可能永远都不会忘记：“这个算法的本质是把平面上线性不可分的样本，映射到高维空间中，使其线性可分。”。这简直太妙了，人很容易理解平面，但那又如何，不解决问题呀。而人不能很好地驾驭高维空间，就有点遗憾了，因为我们需要构造核函数来实现这个映射，无法想象高维空间，你如何来调整参数呢？这就制约了这个算法的使用。思维的局限性使得我们无法完全发挥它的威力。&lt;/p&gt;

&lt;p&gt;生活中有没有例子？当然有。你的心电图是什么曲线？肯定不是直线。健康人的心率曲线是凹凸不平的不规则形状，呈现某种自相似性，貌似混沌。而帕金森患者的心率曲线反而呈现更多的规则性和周期性行为，表现得更有规律。&lt;/p&gt;

&lt;p&gt;再如，工程师群体经常讨论的，一个牛逼程序员顶几个普通程序员？可能是2个也可能是10个甚至100个。前段时间帮人面试新项目的后端技术，他准备前期就用一个程序员搞定。引发我的联想是，堆糖现在这个量级以极致的程度估计的话，多少后端能搞定呢？当然，这不是本文的重点了，按下不谈。&lt;/p&gt;

&lt;p&gt;汽车为什么能取代马匹？谷歌为什么能取代雅虎？因为后者的效率相对于前者有几何级别的增长，不是简单的涨百分几，翻番也不算。前面《如何判断创业项目靠不靠谱》里提到吴军的“黄赌毒”模型，其实他还讲了别的标准，其中一条就是，效率，或者其他的纬度，相比于上一代产品或者公司，有没有数量级的提升。下面这张图来自FirstRound，描述了苹果的产品迭代路线：在旧产品即将进入线性区之时，及时推出新的拳头产品，华丽丽地进入更抖的成长“弯线”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201612/apple-grow.jpeg&quot; alt=&quot;苹果的阶跃&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问个一般人不会考虑的问题：人为什么会感到惊讶，奇怪？就像现在的你……可能请心理学的同学回答比较好。我的理解是，因为认知和现实发生了冲突。冲突的原因可能有很多，其中一个便是现实的非线性和人的线性。我很乐于听说那些让人感叹“这也可以，屌！”的故事，既挠了痒痒，又照亮了盲点。&lt;/p&gt;

&lt;p&gt;讲到这里不得不提下马斯克的第一原理性理论。有光环耀眼的钢铁侠背书，总觉得很牛逼，但又找不出牛逼的原因。也是码这些字的时候突然发现，第一原理性正是克服线性思维的一大利器。不要凭感觉，也不要看这事是不是让大众咋舌了，就看它有没有违背物理学规律。没违背， OK，那就有实现的可能。你想得再夸张都没问题，越夸张越让别人艳羡。&lt;/p&gt;

&lt;p&gt;那么，你的思考，弯的还是直的？&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Dec 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/12/02/thinking-method.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/12/02/thinking-method.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>建立高效的阅读体系</title>
        <description>&lt;p&gt;阅读，是我们汲取知识、涤荡思想的主要手段。如果学习是终身的，那么如何建立高效的阅读体系，也是一个伴随一生的话题。这里阶段性地总结下我的探索，略做分享。&lt;/p&gt;

&lt;h3 id=&quot;发现好内容&quot;&gt;发现好内容&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;永泽有个原则：“对死后不足三十年的作家，原则上是不屑一顾的。”，我们也许不必如此，但未经选择的阅读，确有随波逐流之嫌。发现好内容，可以放出眼光，自己来选，也可以众人拾柴，相信群众的智慧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;豆瓣&lt;/strong&gt;
豆瓣读书频道上可以找到大部分书，有目录、简介、网友评分、笔记和书评，根据这些，不难判断一本书是否符合你的胃口。已经形成这样的习惯：不经意看到的、别人推荐的，都到豆瓣上看看，不错就标记下“想读”。统一收口到这里，不用临时想下一本读什么，“想读”的列表总是比“读过”的长。额外的好处是，发现读书达人，某天循着晓良的朋友圈来到了他的豆瓣主页，发现比你忙的人，读书也比你多，比你快，动力就来了。&lt;/p&gt;

&lt;p&gt;豆瓣上新的速度不快，对于国外较小众的书支持也不多。如果你也想猎奇，正好又是个科技题材的读者，MEAP（Manning Early Access Program）是个不错的选择，人家边写，你边看，有更新了，会及时推送。感谢苏土豪推荐。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reeder 3&lt;/strong&gt;
个人博客时代已经远去，但依然有不少大牛在坚守。特别是在技术领域，除了他们自己的网站，很难在其它地方及时发现他们的内容。大牛的自留地，世外桃源般的独特存在，拜访模式也稍有不同。彼时，我们有Google Reader，纵有每天几百条的更新，管理起来依然很轻松。 gr之后，能让人称心的不多， Reeder的快捷方式和简洁程度都很赞，Mac端和IPhone端都有，无缝切换。&lt;/p&gt;

&lt;p&gt;断断续续收集了40多个订阅源。因为更新频率普遍不高，内容的时效性也不高，每个月翻个两三次即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SCI-HUB&lt;/strong&gt;
学术文献阅读，不比大众读物，对我而言还是个痛苦的过程。老轮子隔三差五甩给我一堆论文时，我总是很好奇，他是如何能快速消灭这些“天书”的呢？但我知道，当读多了通俗读物，心中的疑问依然没有解决时，好奇心会驱使你找到学术文献。如果你也需要的话，Sci-hub是找论文，下论文， 不二选择，之前有专门篇幅说它：&lt;a href=&quot;/thinking/2016/10/19/paper-reading.html&quot;&gt;如果你也穷得看不起论文&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;碎片时间简单读&quot;&gt;碎片时间简单读&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;对古人的“床上、厕上、马上”读书，一直有个误解，以为是说他们勤奋刻苦，其实可以有另一种理解，这“三上”不正是古人的碎片时间吗？碎片时间古已有之。看书不必刻意，空了拿出来翻翻，再自然不过。只是不同时段，不同环境，适合不同的题材，碎片时间适合消灭简单易懂的内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pocket&lt;/strong&gt;
同事跟我描述他的一个痛点，本来想找主题 a的资料，中途看到 b被吸引了，循迹而去，半路又杀出 c、d、 e，一直被带着走，a没看多少，一上午过去了。 类似的还有，别人给你贴的链接，当下没空细看，不看的话忙着忙着又忘记了，直接保收集保存吗，可能又还没达到你的保存标准。 &lt;/p&gt;

&lt;p&gt;先丢进一个盒子，缓存下，空了再翻出来看。这个盒子有不少选择，试用下来还是Pocket好用，速度快。浏览器里装个插件，点一点就好，空了之后，电脑或手机打开，相当方便。&lt;/p&gt;

&lt;p&gt;不必害怕时间碎片化，如果这是一个既定事实，就拥抱它吧，刷微博、知乎、Twitter、 Hacker News，微信公众号……我使用这些应用的习惯甚至因 Pocket而改变了。在它们上面尽量快速浏览，淘汰掉大多数，少数不错的放进Pocket，很快就清理干净，专治“红点”强迫症。这时在Pocket内，你有了一个待读队列，而且是全局的，这很重要，确保了你始终可以看到所有信息源中最重要的文章。怕信息过载，多半是没有好的手段来管理信息。&lt;/p&gt;

&lt;h3 id=&quot;完整时间深度读&quot;&gt;完整时间深度读&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;碎片化阅读是游击战，注重轻便灵活，适合解决小冲突，打不了大战役。需要整块时间做深度阅读，打硬仗，打大仗。硬仗、大仗少不了重型武器，我的重型武器是“多看阅读”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多看阅读&lt;/strong&gt;
用多看的人不多了（似乎一直没多过），我一直这么忠实，是看重以下几个特性。在阅读这件事上，如果有一个工具能把事情做好，就都交给它好了，不必再搞第二个。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PDF重排功能。在手机上看 PDF的利器，数学公式多的除外……&lt;/li&gt;
  &lt;li&gt;全文检索。这是标配了，看书不太会是线性前进的，难免要搜索，来回跳转。&lt;/li&gt;
  &lt;li&gt;WIFI传书功能。至今没有任何一个平台可以直接买到所有书。 因此，工具的开放性就很重要了，它必须能加载其它书籍。WiFi传书就是一个简便的方式，把从不同渠道淘来的PDF，EPUB甚至是TXT，集中到多看，保证一致的阅读体验。&lt;/li&gt;
  &lt;li&gt;笔记同步到Evernote。笔记自动同步到自动同步到绑定的Evernote帐号，免去了整理笔记的麻烦。这是我最在意的功能。豆瓣阅读也有同步笔记的功能，早期我一直用它。但因为是同步到豆瓣网站，大大减弱了检索和复用笔记的能力，只好弃用。&lt;/li&gt;
  &lt;li&gt;统计。数量统计，时间统计，变化曲线等等，虽然使用频率低，但也很重要，无法评估就无法进步。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没有提到纸质书，因为它大概已经从我的阅读体系内退出了，去年买的书还堆在角落积灰。也没提很多人喜欢的Kindle，因为我无法再在手机之外携带一个Kindle，以及，我看重的功能，Kindle得有一些辅助工具才能完全做到。凡此种种小问题，放在大时间尺度上就是不小的成本。&lt;/p&gt;

&lt;p&gt;比工具更重要的是完整的阅读时间，至少一小时吧。挤时间，这是工具之外的事了，威武如波姐，不论忙到几点，铁定要看一两小时才睡觉，第二天，依然生龙活虎。对于这种bug式的存在，我在自愧不如的同时，只想画个圈圈诅咒他。&lt;/p&gt;

&lt;h3 id=&quot;沉淀沉淀沉淀&quot;&gt;沉淀、沉淀、沉淀&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Evernote&lt;/strong&gt;
这是整个阅读体系的中心，因为阅读的目的不是阅读本身，而是沉淀和运用。直接沉淀到大脑当然是最好了，但估计没人能百分百做到。我们需要一个触手可及、离线可用、搜索强大、安全可靠的知识管理工具。上面提到的工具都支持把内容收集到知识库中，这是硬性要求，绝不能妥协。 Evernote满足了我对这个工具的所有想象。12年至今，不离不弃，越来越倚重它。&lt;/p&gt;

&lt;p&gt;Evernote本身的普及度已经很高了，不再赘述。想提一提的是Evernote Web Clipper，一个浏览器插件。这些功能都让人爱不释手：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一键收集到Evernote，我们的精力很有限，一定要千方百计降低自己收集和保存的成本，不要浪费在无用的动作上：“复制-&amp;gt;打开软件-&amp;gt;新建文档-&amp;gt;粘贴”。 &lt;/li&gt;
  &lt;li&gt;页面重排版，准确判断正文，去掉广告，去掉周边内容，花里胡哨瞬间变得清晰简洁。真的让阅读成为一种享受。&lt;/li&gt;
  &lt;li&gt;高亮功能，收集前先高亮下重点，轻巧的小插件，也有重型武器的功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;写在最后&quot;&gt;写在最后&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;上面提到的工具有各自的作用和分工，配合起来，解决了各个环节的问题：发现、筛选、计划、阅读、笔记、整理和沉淀。上下游建立畅通的管道，协同作战，才能成为体系。
&lt;img src=&quot;/img/201611/reading.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;
祝大家都能有个合适自己的高效阅读体系。&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/reading/2016/11/28/reading-system.html</link>
        <guid isPermaLink="true">http://localhost:4000/reading/2016/11/28/reading-system.html</guid>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>如何判断创业项目是否靠谱</title>
        <description>&lt;p&gt;可穿戴设备有机会吗？&lt;/p&gt;

&lt;p&gt;VR到底能不能火，什么时候火？&lt;/p&gt;

&lt;p&gt;O2O行业有未来吗？&lt;/p&gt;

&lt;p&gt;生鲜电商行不行？&lt;/p&gt;

&lt;p&gt;不光是创业项目，还可以是想法、产品，甚至是行业。孟庆祥和吴军的课里分别提出了他们的模型，我觉得还蛮受用，这里做个简单的整理。&lt;/p&gt;

&lt;h4 id=&quot;信息电路图&quot;&gt;信息电路图&lt;/h4&gt;

&lt;p&gt;商场和门店的本质作用是展示信息。这可能是整节课下来我印象最为深刻的观点。商场和门店都太常见了，很少有人去思考“卖东西”之外的更深层次的作用。另外，这个描述具有一定抽象程度，能够把很多看似没有关系的东西联系在一起。原本需要case by case分析的案例，可以投射到信息维度，进而用这个模型分析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201611/circuit.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要判断是不是信息，首先问，有变化吗？一成不变就没有信息可言；其次，顾客本来就知道吗？人皆尽知构不成信息；最后，是否易于理解？不易理解的也很难成为信息。&lt;/p&gt;

&lt;p&gt;基于这个问题的回答，孟老师判断现在市面上的可穿戴设备大部分是没有价值的。血糖、血压、脉搏本身的变化范围非常小，现在看和一小时后看，一天后看，一个月后看，数据基本上是一样的。即使是病人，测过几次后，自己心里就有底了。随身穿戴一个不提供信息的设备，意义何在？&lt;/p&gt;

&lt;p&gt;确认有信息存在后，要看信息的成本。实体店披露、展示信息，实体店的租金便是信息的成本。网上卖的衣服普遍比线下便宜，很重要一点是因为网上展示信息的成本要低很多。这个成本既是商家的成本，也是消费者的成本，拿起手机和出门逛商场，哪个方便不言自明。除了更方便，网上能提供更丰富、更多样的选择，进一步降低了成本。&lt;/p&gt;

&lt;p&gt;为了取得比较好的传播效果，要注意挖掘人的心理。科技永远取代不了人的原始需求。比如，人们喜欢八卦，虽然从没有人把它定义为原始需求，但八卦伴随人类的历史可不短。《人类简史》说：“等到认知革命之后，智人有了八卦的能力，于是部落规模变得更大，也更稳定”。新闻、八卦类的东西，总能轻易虏获大众眼球。&lt;/p&gt;

&lt;p&gt;电路的最后一环是信息的深度。&lt;/p&gt;

&lt;p&gt;线上信息的流动之迅速和便捷极大地减少了信息的成本。很多传统行业的公司都在琢磨互联网会不会颠覆它们。以房地产为例，既然线上的信息成本更低，为什么房地产线上交易还是不如线下交易？因为，网上提供的轻度信息根本无法支撑起决策。&lt;/p&gt;

&lt;p&gt;链家曾做过一次调查，全国的门店租金平均下来相当于每个业务员每个月多支出500块钱。显然和线上模式对比没有任何优势，但这个额外的信息成本给它们带来了线上无法实现的收益：它可以带客户看房，现场检验，当面交流，提供专业咨询服务甚至是金融服务。越是重大的决策，对信息深度的要求越高，也就越难被线上模式颠覆。&lt;/p&gt;

&lt;h4 id=&quot;黄赌毒先行&quot;&gt;黄赌毒先行&lt;/h4&gt;

&lt;p&gt;这是吴军老师的模型。黄赌毒是人类社会极力避免但可能永远无法消灭的东西，因为它们根植于人性的底层，反映了人类动物性的一面。一来需求强烈，二来见不得光，使得这些领域的从业者非常愿意去尝试新事物，寻求更大的利益或更隐蔽的方式。&lt;/p&gt;

&lt;p&gt;吴军举了HTTPS的例子。没人愿意被发现浏览了黄色网站，因此在线黄色产业有很强的保密需求，还要能安全地交易和支付。互联网早期，人们根本无法想象在网站传输信用卡号。不能很好地保护用户隐私，这对于黄色网站而言是个痛点，所以加密技术甫一出现，他们便如获至宝，积极使用。如果说支付宝培养了人们网上支付的习惯，那么可以说是黄色网站种下了人们在网上交易的种子。&lt;/p&gt;

&lt;p&gt;色情产业扶持的不光是HTTPS。google一下，发现有太多技术的流行与之有关。VCR、DVD、流传输、压缩，甚至是浏览器内的脚本JavaScript，VBScript和DHTML。&lt;/p&gt;

&lt;p&gt;码这段字的时候收到一条短信提醒，比特币大涨到5500，创三年新高。投资比特币靠谱吗？套用吴军的模型，一个也许有用的表征是，比特币在国际洗钱链条中正发挥着越来越不可替代的作用。&lt;/p&gt;

&lt;p&gt;似乎明白了点什么。&lt;/p&gt;

&lt;p&gt;Facebook把宝押在了VR上，那VR什么时候什么能真正点燃大众消费市场呢？如果哪天你发现新闻报道VR在岛国的特色服务里，极大地提高了用户检验，获得了大家的一致好评，那它离流行就不远了。也许，你可以看准时机，买入Facebook的股票。&lt;/p&gt;

&lt;p&gt;判断项目靠不靠谱绝非易事，以上提供两个可供参考的模型，也可以说是套路。积累几个套路，碰到实际问题时，若能灵活应用，或许能少走一些弯路。&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/11/21/check-idea.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/11/21/check-idea.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>从美国大选看不确定性</title>
        <description>&lt;p&gt;公众号开张的第一篇写了不确定性，过去的一年，时不时会再冒出这个话题来，因为它实在是太常见，又太重要了。比如这周全球热议的美国大选，就是个典型的案例。戏剧般变化的选情，以及特朗普政策本身的不确定性，无不牵动着全球股市的变化。两位候选人自己也是一脸蒙逼，希拉里不得不取消早早预备的庆功宴，而她其实有更好的选择，就是转让给特朗普，因为后者压根没有准备庆功宴。&lt;/p&gt;

&lt;p&gt;今天从另一个角度再聊聊不确定性，算是对一年前的呼应。&lt;/p&gt;

&lt;p&gt;Weinberg在《系统化思维导论》一书中用随机程度和复杂程度两个维度界定问题。这是一个全局的视角，让我一下子从细分的学科中跳出来，看清全貌。有了更加泛化和统一的框架来规整散落的学科认识，这是让我觉得受用的地方。“有序的简单”，是整个学生生涯的主要学习对象，如牛顿三大定律，质能方程等等。“无序的复杂”，问题本身可简单可复杂，但都表现出足够的随机性，因此可以进行统计研究，一个简单的例子：掷骰子，我们无法知道单次掷出的点数，但大量重复后又表现出一定规律。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201611/random-complex.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“有序的复杂”，是大自然中的普遍现象。这些现象，既不能用解析法准确分析，也不能用统计法预测概率，是不确定性的最大来源。&lt;/p&gt;

&lt;p&gt;“一只南美洲亚马逊河流域热带雨林中的蝴蝶，偶尔扇动几下翅膀，可以在两周以后引起美国得克萨斯州的一场龙卷风”，这是大家熟知的蝴蝶效应。像这样演变过程对初态非常敏感的系统，称为混沌系统。&lt;/p&gt;

&lt;p&gt;高晓松在最新一期《晓松奇谈》中反思美国大选，他提到在一个剧本里的假设：“每个人脑门上都直接显示内心的真实想法”，他预计世界人口会因此减少一半，然后重新稳定。因为，当一对男女互相说我爱你时脑门上却显示另一个人的名字，会起杀人的心思，政客说希望和贵国世代友好时脑门上却显示他只是来骗钱，也会引发战争的念头。&lt;/p&gt;

&lt;p&gt;这是他的剧本，怎么构思他说了算。但他也许不知道，这个假设背后涉及了不确定性。&lt;/p&gt;

&lt;p&gt;可以用马尔萨斯的“人口论”来研究这个假设，“人口论”背后的公式非常简单：
&lt;img src=&quot;/img/201611/population-equation.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;
Xn表示第n代的人口相对于地球能承受的最大人口数N的比例 。这个公式综合考虑了人口增长率和诸如食物、疾病、战争，以及“脑门上装显示器”等因素对人口的影响。简单背后的复杂可能超出大部分人的估计。
&lt;img src=&quot;/img/201611/population-chart.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图绿色曲线表示不同k值下繁衍到无穷后的情况，不同的初值k，最终的归宿截然不同，图中从左到右分别经历了灭绝、平衡、双态平衡和混沌。混沌状态时，人口不会收敛到稳定状态，而是在无穷多个不同的数值中无规则地跳来跳去。&lt;/p&gt;

&lt;p&gt;这么看，高晓松大概把k值设定在1.2-2之间了。&lt;/p&gt;

&lt;p&gt;知道了混沌现在后，我们还想进一步描述混沌的程度，于是就出现了“熵”的概念：一个系统混乱程度、或称无组织程度的度量。系统越混乱，熵就越大；系统越有序，熵就越小。不同熵值对人们做决策有什么影响呢？这在一年前的文章中有过讨论，可以翻出来看看。&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/11/14/election-determine.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/11/14/election-determine.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>如果你也穷得看不起论文</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/201610/scihub.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不太追论文，但偶尔也有拿来瞄几眼的需求。比起搜网页，下论文一直是个frustrating的过程，直到碰到了一个良心工具。如果你也有此需求，比如看看新鲜出炉的“深度学习”论文，这篇文章也许对你有帮助。&lt;/p&gt;

&lt;p&gt;何恺明，两次获得CVPR（Computer Vision and Pattern Recognition）最佳论文奖，建议做研究时应该：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;多读论文。研究初期，需要海量阅读论文，并且不需要太专注于别人的具体算法和如何实现等细节，更多地去关注论文简介及作者所做的与研究相关的工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这话固然不错，但实践起来却不是容易的事。光从经济角度看就不容易，看论文其实是件奢侈的事。大部分论文，特别是经过校审的学术论文，都是付费下载，而且价格不菲。&lt;/p&gt;

&lt;p&gt;也许正是这个原因，有个学长毕业后经常找还在学校的我下论文，因为学校以教育的名义能用较低的价格下载论文。但即使是这样，也是一笔不小的开支，就连哈佛大学这样的知名学府也在报怨付不起看论文的费用。&lt;/p&gt;

&lt;p&gt;同样不爽的还有刚毕业时的俄罗斯姑娘Alexandra Elbakyan：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;看一篇论文要付30多美元，实在是一件疯狂的事。要知道，做一个研究，常常要浏览几十几百篇论文。所以，我通过pirating获得论文！不论收入和身份，每个人都有权获得知识。这完全合法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;战斗民族的彪悍之处在于，不爽了就得反抗，于是，&lt;a href=&quot;http://sci-hub.cc/&quot;&gt;Sci-Hub&lt;/a&gt;诞生了。&lt;/p&gt;

&lt;p&gt;搜索论文时，Sci-Hub会直接从兄弟网站LibGen中下载，如果还没有收录，就从传统论文期刊网站下载，再保存到LibGen中。借助于人们匿名贡献的访问凭证，Sci-Hub可以越过这些期刊的收费环节。这意味着上传到Springer，Elsevier上的论文很快就会在Sci-Hub上出现。&lt;strong&gt;迄今为止，它已经收录了约5000万篇论文，差不多是所有已发表的审阅论文&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;网站不仅没有广告，连操作都简洁得出奇，如果是精确命中，甚至没有搜索结果列表，点击搜索就直接下载。如果你也穷得看不起论文，还等什么，赶紧收藏吧。&lt;/p&gt;

&lt;p&gt;Sci-Hub的做法引发了激烈的讨论，利益受损的Elsevier更是将其告上法庭。好在美国人的法律，管不到老毛子的土地上。不讨论法律，我们从普通民众角度朴实地发表看法。&lt;/p&gt;

&lt;p&gt;论文有著作权，和同样有著作权的书籍、音乐类似，这样似乎可以得出Sci-Hub不对的结论。但必须注意到一个重要区别：通过音乐发行商和书籍出版社，著作权所有者都能从中获得经济利益，而论文的作者并没有从期刊的收录中获得利益，更没有所谓的点击付费。不仅没有，还要付出一些代价。因为，研究人员的晋升一定程度上取决于发表多少论文，以及论文在什么样的刊物上发表。为了让论文能被大众看到，他们常常要付费给期刊。&lt;/p&gt;

&lt;p&gt;期刊其实是个两面收费的中介。这个中介没有保护、激励作者，也没有促进知识的流通。而互联网的一大功能是促进信息的流动和透明，让更多人能免费、高效地获得信息。可以断言，即使这个Sci-Hub倒下了，也还会有更多Sci-Hub站起来。&lt;/p&gt;

&lt;p&gt;正如&lt;a href=&quot;http://www.un.org/en/universal-declaration-human-rights/index.html&quot;&gt;联合国人权宣言&lt;/a&gt;里讲的：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Everyone has the right freely to participate in the cultural life of the community, to enjoy the arts and to share in scientific advancement and its benefits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，你可能会说，哪还有功夫去争论谁对谁错，如果穷得看不起论文，赶紧让自己先富起来！诚哉，斯言。&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Oct 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/10/19/paper-reading.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/10/19/paper-reading.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
      <item>
        <title>蚂蚁与互联网</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/201610/ant.jpeg&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要不要出去找吃的，出去多少只，对蚂蚁而言，这是必须面对的问题。&lt;/p&gt;

&lt;p&gt;出去多了，有收获还好，没收获的话，浪费“蚁力”不说，江湖险恶，还有丧命的风险。&lt;/p&gt;

&lt;p&gt;出去少了，虽不至于“不知有汉，无论魏晋”，但错过食物，减少收成，却是很有可能的。&lt;/p&gt;

&lt;p&gt;虽简单，却是生死攸关的问题。生存是第一需求，但食物越多并不完全等价于存活得越久。后者要求的是性价比，是消耗较少资源，收集较多食物。&lt;/p&gt;

&lt;p&gt;蚂蚁们给出了自己的答案。&lt;/p&gt;

&lt;p&gt;这个答案不是“蚁后坐阵指挥，决胜千里”。蚁后虽有王后的名头，却不过是一只专门负责下蛋的蚂蚁，并没有什么“政治”权力。况且，也没有蚂蚁坐在门口清点和汇报布阵情况供它决策。&lt;/p&gt;

&lt;p&gt;每当有蚂蚁带着食物载誉而归时，便会在洞口放下食物，和守候在那里的蚂蚁碰一碰那两根“小天线”。等待的蚂蚁是否出发，踏上冒险之旅，取决于这种交流的次数和间隔的时长。&lt;/p&gt;

&lt;p&gt;一旦出发，不找到点什么，蚂蚁是不会轻易回家的。因此，周围的食物越多，回来得越频繁，就有越多的蚂蚁集结出发；食物越少，回来的次数也少，家里的蚂蚁就自觉省点力，不出去白忙活了。当然，回来的少，也可能是壮烈牺牲了，说明外面危险，还是按兵不动的好。&lt;/p&gt;

&lt;p&gt;没有统筹兼顾，没有上传下达，个体的机械和无知，却构成了整体的灵活与英明。&lt;/p&gt;

&lt;p&gt;这种方式，在蚂蚁界已经运行了几百万年，恐龙在的时候，它们在；恐龙不在的时候，它们依然在。人类在的时候，它们在；人类不在的时候，诅咒它们也不在……&lt;/p&gt;

&lt;p&gt;你以为这是在讲蚂蚁觅食，但其实是在讲 TCP通信。TCP协议能够流行、成为整个互联网的基石，很重要的一点是它解决了之前一直存在的“拥塞崩溃”问题。解决此问题的一个措施是“拥塞控制”：&lt;/p&gt;

&lt;p&gt;拥塞控制是一种用来调整传输控制协议（TCP）连接单次发送的分组数量（单次发送量，在英文文献和程序代码中常叫做cwnd）的算法。它通过增减单次发送量逐步调整，使之逼近当前网络的承载量。&lt;/p&gt;

&lt;p&gt;我们要在事先不知道带宽，或带宽一直变化的情况下，完成通信又避免拥塞。&lt;/p&gt;

&lt;p&gt;TCP发送数据包，好比蚂蚁外出觅食；返回确认符，好比蚂蚁带回食物。很快返回大量确认符，意味着带宽充足，允许发送更多数据包，好比大量蚂蚁回巢，表明食物充足，要多派人手出去抢运。反之亦然。如果根本不返回，发送和外出也将停止，对应TCP的超时。&lt;/p&gt;

&lt;p&gt;第一只外出的蚂蚁是如何决定出去而不是留下呢？这其实不难，一开始总得有一批侦查员，先出去打探打探，为后续行动收集情报。因为只是侦查，所以数量不用也不宜太多。对应的是TCP控制拥塞的另一招——慢启动，服务器通过 TCP 连接初始化一个新的单次发送量 (cwnd)，将其值设置为一个系统设定的保守值。每次往返都令其翻倍(指数式增长)，进而迅速向有效带宽靠拢。&lt;/p&gt;

&lt;p&gt;一个优秀的分布式系统是没有中央节点的分布式系统。神奇的自然选择造就了蚁群，这个优秀的分布式系统。&lt;/p&gt;

&lt;p&gt;争气的是，我们并没有“抄袭”蚂蚁，而是独立发现这一算法，并应用在TCP协议中。&lt;/p&gt;

&lt;p&gt;1988 年，Van Jacobson 和 Michael J. Karels 撰文描述了解决这个问题的几种算法：慢启动、拥塞预防、快速重发和快速恢复。这四种算法很快被写进了 TCP 规范。事实上，正是由于这几种算法加入TCP，才让因特网在 20世纪80年代末到 90年代初流量暴增时免于大崩溃。&lt;/p&gt;

&lt;p&gt;2005年，Vint Cerf和Bob Kahn获得小布什颁发的“总统自由勋章”。向两位大神致敬，也向发明TCP/IP的Vint Cerf（被誉为“互联网之父”）和Bob Kahn致敬。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/201610/award.webp&quot; alt=&quot;2005年，Vint Cerf和Bob Kahn获得小布什颁发的“总统自由勋章”&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对了，我们知道蚂蚁懂这个算法，这事本身也是很牛逼的。这是斯坦福大学教授Deborah Gordon长达30年的研究成果。没错，我们是独立提出了蚂蚁觅食的算法，但我们有什么信心能独立提出它们的更多算法？&lt;/p&gt;

&lt;p&gt;搜“Harvester ants use interactions to regulate forager activation and availability”，看教授的研究论文。&lt;/p&gt;

&lt;h4 id=&quot;参考资料&quot;&gt;参考资料&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;http://news.stanford.edu/news/2013/may/ants-forage-evolve-051413.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://news.stanford.edu/news/2012/august/ants-mimic-internet-082312.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://priceonomics.com/the-independent-discovery-of-tcpip-by-ants/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.wired.com/2013/07/what-ants-yes-know-that-we-dont-the-future-of-networking/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://zh.wikipedia.org/wiki/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.ted.com/talks/deborah_gordon_digs_ants#t-965306&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;High Performance Browser Networking&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 15 Oct 2016 12:15:09 +0800</pubDate>
        <link>http://localhost:4000/thinking/2016/10/15/ant-www.html</link>
        <guid isPermaLink="true">http://localhost:4000/thinking/2016/10/15/ant-www.html</guid>
        
        
        <category>thinking</category>
        
      </item>
    
  </channel>
</rss>
